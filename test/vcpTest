#!/bin/tcsh -f
 ##############  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  ##############
 #
 #  (c) 2010.                            (c) 2010.
 #  Government of Canada                 Gouvernement du Canada
 #  National Research Council            Conseil national de recherches
 #  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6
 #  All rights reserved                  Tous droits réservés
 #
 #  NRC disclaims any warranties,        Le CNRC dénie toute garantie
 #  expressed, implied, or               énoncée, implicite ou légale,
 #  statutory, of any kind with          de quelque nature que ce
 #  respect to the software,             soit, concernant le logiciel,
 #  including without limitation         y compris sans restriction
 #  any warranty of merchantability      toute garantie de valeur
 #  or fitness for a particular          marchande ou de pertinence
 #  purpose. NRC shall not be            pour un usage particulier.
 #  liable in any event for any          Le CNRC ne pourra en aucun cas
 #  damages, whether direct or           être tenu responsable de tout
 #  indirect, special or general,        dommage, direct ou indirect,
 #  consequential or incidental,         particulier ou général,
 #  arising from the use of the          accessoire ou fortuit, résultant
 #  software.  Neither the name          de l'utilisation du logiciel. Ni
 #  of the National Research             le nom du Conseil National de
 #  Council of Canada nor the            Recherches du Canada ni les noms
 #  names of its contributors may        de ses  participants ne peuvent
 #  be used to endorse or promote        être utilisés pour approuver ou
 #  products derived from this           promouvoir les produits dérivés
 #  software without specific prior      de ce logiciel sans autorisation
 #  written permission.                  préalable et particulière
 #                                       par écrit.
 #
 #  This file is part of the             Ce fichier fait partie du projet
 #  OpenCADC project.                    OpenCADC.
 #
 #  OpenCADC is free software:           OpenCADC est un logiciel libre ;
 #  you can redistribute it and/or       vous pouvez le redistribuer ou le
 #  modify it under the terms of         modifier suivant les termes de
 #  the GNU Affero General Public        la “GNU Affero General Public
 #  License as published by the          License” telle que publiée
 #  Free Software Foundation,            par la Free Software Foundation
 #  either version 3 of the              : soit la version 3 de cette
 #  License, or (at your option)         licence, soit (à votre gré)
 #  any later version.                   toute version ultérieure.
 #
 #  OpenCADC is distributed in the       OpenCADC est distribué
 #  hope that it will be useful,         dans l’espoir qu’il vous
 #  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE
 #  without even the implied             GARANTIE : sans même la garantie
 #  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ
 #  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF
 #  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence
 #  General Public License for           Générale Publique GNU Affero
 #  more details.                        pour plus de détails.
 #
 #  You should have received             Vous devriez avoir reçu une
 #  a copy of the GNU Affero             copie de la Licence Générale
 #  General Public License along         Publique GNU Affero avec
 #  with OpenCADC.  If not, see          OpenCADC ; si ce n’est
 #  <http://www.gnu.org/licenses/>.      pas le cas, consultez :
 #                                       <http://www.gnu.org/licenses/>.
 #
 ########################################################################
 #/

if ( ! ${?CADC_ROOT} ) then
        # probably running as a cron job
        echo "Error: Environment variable CADC_ROOT is not set"
        source ~/.cshrc || exit $status
endif

echo "Using CADC_ROOT: "$CADC_ROOT

set VCP_CMD = "$CADC_ROOT/scripts/vcp"
set VLS_CMD = "$CADC_ROOT/scripts/vls"
set VMKDIR_CMD = "$CADC_ROOT/scripts/vmkdir"
set VRM_CMD = "$CADC_ROOT/scripts/vrm"
set VSYNC_CMD = "$CADC_ROOT/scripts/vsync"
set TEST1_CERT = "--certfile=/usr/cadc/dev/admin/test-certificates/x509_CADCRegtest1.pem"
set TEST2_CERT = "--certfile=/usr/cadc/dev/admin/test-certificates/x509_CADCAuthtest1.pem"
set DATA = "$CADC_ROOT/test/data"

set TRUST = "-Dca.nrc.cadc.auth.BasicX509TrustManager.trust=true"
set LOCAL = ""
if ( ${?1} ) then
        if ( $1 == "localhost" ) then
                set LOCAL = "-Dca.nrc.cadc.reg.client.RegistryClient.local=true $TRUST"
        else if ( $1 == "devtest" ) then
                set LOCAL = "-Dca.nrc.cadc.reg.client.RegistryClient.host=devtest.cadc-ccda.hia-iha.nrc-cnrc.gc.ca $TRUST"
        else if ( $1 == "test" ) then
                set LOCAL = "-Dca.nrc.cadc.reg.client.RegistryClient.host=test.cadc-ccda.hia-iha.nrc-cnrc.gc.ca"
        endif
endif

set sybase_login = `dbrc_get SYBASE vospace`

# using a test dir makes it easier to cleanup a bunch of old/failed tests
set VOROOT = "vos://cadc.nrc.ca\!vospace"
set VOHOME = "$VOROOT/CADCRegtest1"
set BASE = "$VOHOME/atest"
# alternate uri which should be equivalent
set ALTBASE = "vos://cadc.nrc.ca~vospace/CADCRegtest1"

set TIMESTAMP=`date +%Y-%m-%dT%H-%M-%S`
set CONTAINER = $BASE/$TIMESTAMP
chmod 775 $DATA
# for use with user/password
#set USER1 = "cadcregtest1"
#set PASSWD1 = `sqsh -h -SSYBASE -U$sybase_login[1] -P$sybase_login[2] -C"select pswd from archive..users where user_id='cadcregtest1'" -w1024 | awk 'END{print}'`

echo -n "** checking base URI"

$VLS_CMD $TEST1_CERT -v $BASE > /dev/null
if ( $status == 0) then
	echo " [OK]"
else
	echo -n ", creating base URI"
        $VMKDIR_CMD $BASE || echo " [FAIL]" && exit -1
	echo " [OK]"
endif

echo "*** starting test sequence ***"
echo
echo "** test container: ${CONTAINER}"
echo

echo -n "view vospace root container "
$VLS_CMD $TEST1_CERT $VOROOT > /dev/null || echo " [FAIL]" && exit -1
echo " [OK]"

#TODO test fails because return status is 0
#echo -n "view non-existent node "
#$VLS_CMD $CONTAINER > /dev/null && echo " [FAIL]" && exit -1
#echo " [OK]"

echo -n "create private container "
$VMKDIR_CMD $TEST1_CERT $CONTAINER > /dev/null || echo " [FAIL]" && exit -1
echo " [OK]"

#TODO application returns error code when container empty.
#echo -n "view created container "
#$VLS_CMD $TEST1_CERT $CONTAINER > /dev/null || echo " [FAIL]" && exit -1
#echo " [OK]"

echo -n "copy file to existing container and non-existent data node "
$VCP_CMD  $TEST1_CERT $DATA/something.png $CONTAINER/ || echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "view existing data node "
$VLS_CMD $TEST1_CERT $CONTAINER/something.png > /dev/null || echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "copy data node to local filesystem "
$VCP_CMD $TEST1_CERT $CONTAINER/something.png $DATA/something.png.2 || echo " [FAIL]" && exit -1
cmp $DATA/something.png $DATA/something.png.2 || echo " [FAIL]" && exit -1
\rm -f $DATA/something.png.2
echo " [OK]"

echo -n "copy/overwrite existing data node "
$VCP_CMD $TEST1_CERT $DATA/something.png $CONTAINER/something.png || echo " [FAIL]" && exit -1
echo " [OK]"

#TODO tests with 10G files fail due to memory problems. change to seek=10G when problems fixed
echo -n "copy 10Gb file to vospace"
dd if=/dev/zero of=10Gbfile.test bs=1 count=0 seek=1M >& /dev/null
$VCP_CMD $TEST1_CERT 10Gbfile.test $CONTAINER/10Gbfile.test >& /dev/null || echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "copy 10Gb file from vospace"
$VCP_CMD $TEST1_CERT $CONTAINER/10Gbfile.test 10Gbfile.test.2 >& /dev/null || echo " [FAIL]" && exit -1
cmp 10Gbfile.test 10Gbfile.test.2 || echo " [FAIL]" && exit -1
\rm -f 10Gbfile.test
\rm -f 10Gbfile.test.2
echo " [OK]"

echo -n "delete 10Gb file from vospace"
$VRM_CMD $TEST1_CERT $CONTAINER/10Gbfile.test || echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "failure to copy a file from vospace because permissions in vospace"
$VCP_CMD $TEST2_CERT $VOHOME/DONOTDELETE.txt DONOTDELETE.txt >& /dev/null && echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "failure to copy a file from vospace because local directory permissions"
mkdir readonly
chmod 400 $DATA
$VCP_CMD $TEST1_CERT $CONTAINER/something.png $DATA/something.png >& /dev/null && echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "failure to copy a file to vospace because permissions in vospace"
#different user
$VCP_CMD $TEST2_CERT $DATA/something.png $CONTAINER/something.png >& /dev/null && echo " [FAIL]" && exit -1
echo " [OK]"

echo -n "failure to copy a file to vospace because local directory permissions"
$VCP_CMD $TEST1_CERT $DATA/something.png $CONTAINER/something.png >& /dev/null && echo " [FAIL]" && exit -1
chmod 775 $DATA 
echo " [OK]"

#TODO: set the appropriate environment variable
#echo -n "failure to copy from vospace when server is down"
#set SERVER = "serverdown.cadc.dao.nrc.ca"
#$VCP_CMD $TEST1_CERT $CONTAINER/something.png something.png >& /dev/null && echo " [FAIL]" && exit -1
#$VLS_CMD $TEST1_CERT $CONTAINER > /dev/null && echo " [FAIL]" && exit -1
#echo " [OK]"

echo -n "failure to copy because bad certificate"
$VCP_CMD --certfile=something.png $CONTAINER/something.png something.png >& /dev/null && echo " [FAIL]" && exit -1
$VLS_CMD --certfile=something.png $CONTAINER >& /dev/null && echo " [FAIL]" && exit -1
echo " [OK]"

#TODO: allow vsync command to take --certfile as an option
#echo -n "vsync directory"
#cp $DATA/something.png $DATA/something.2.png
#$VSYNC_CMD $TEST1_CERT $DATA $CONTAINER/ >& /dev/null || echo " [FAIL]" && exit -1
#$VLS_CMD $TEST1_CERT $CONTAINER/data/something.2.png > /dev/null || echo " [FAIL]" && exit -1
#echo " [OK]"

#TODO: allow vsync command to take --certfile as an option
#echo -n "vsync directory with modified file"
#cat $DATA/something.png >> $DATA/something.2.png
#$VSYNC_CMD $TEST1_CERT $DATA $CONTAINER/ >& /dev/null || echo " [FAIL]" && exit -1
#$VLS_CMD $TEST1_CERT $CONTAINER//data/something.2.png > /dev/null || echo " [FAIL]" && exit -1 #check the size
#echo " [OK]"
