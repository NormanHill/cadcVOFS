#!python
"""copy files from / to vospace directly without using the FUSE layer"""
import time
def isdir(filename):
    if filename[0:4]=="vos:":
        return client.isdir(filename)
    else:
        return os.path.isdir(filename)

def access(filename,mode):
    if filename[0:4]=="vos:":
        return client.access(filename,mode)
    else:
        return os.access(filename,mode)

def listdir(filename):
    if filename[0:4]=="vos:":
        return client.listdir(filename)
    else:
        return os.listdir(filename)

def mkdir(filename):
    logging.debug("Making directory %s " % ( filename))
    if filename[0:4]=='vos:':
        logging.debug("In VOSpace")
        return client.mkdir(filename)
    else:
        logging.debug("On the filesystem")
        return os.mkdir(filename)

def copy(source,dest):    
    
    ## determine if this is a directory we are copying so need to be recursive
    if isdir(source):
        ## make sure the destination exists...
        if not access(dest,os.F_OK):
            mkdir(dest)
        ## for all files in the current source directory copy them to the destination directory
        for filename in listdir(source):
            copy(os.path.join(source,filename),os.path.join(dest,filename))
    else:
        if opt.interrogate:
            if access(dest,os.F_OK):
                sys.stderr.write("File %s exists.  Overwrite? (y/n): " % (dest))
                ans=sys.stdin.readline().strip()
                if ans!='y':
                    sys.exit(errno.EEXIST)
        logging.info("%s -> %s " % ( source, dest))
        loopCount=0
	waitTime=1
        while True:
            try:
                client.copy(source,dest,sendMD5=True)
	        break
            except Exception as e:
		logging.critical("ERROR: %s on try %d" % (str(e), loopCount))
                if loopCount > 10 :
                    raise e
	        logging.critical("Retrying in %d seconds\n" %(waitTime))
                loopCount+=1
                time.sleep(waitTime)
                waitTime=1.5*waitTime
                
	

                




if __name__=='__main__':

    from optparse import OptionParser
    import logging, sys
    import vos, errno, os
    
    parser=OptionParser()
    parser.add_option("-i","--interrogate",action="store_true",help="Ask before overwriting files")
    parser.add_option("-v","--verbose",action="store_true",help="Verbose output")
    parser.add_option("-d","--debug",action="store_true",help="set this option to get help solving connection issues")
    parser.add_option("--certfile",help="location of your CADC security certificate file",default=os.path.join(os.getenv("HOME","."),".ssl/cadcproxy.pem"))

    name=sys.argv[0]

    (opt,args)=parser.parse_args()

    if opt.verbose:
        logLevel=logging.INFO
    elif opt.debug:
        logLevel=logging.DEBUG
    else:
        logLevel=logging.ERROR
        
    logging.basicConfig(level=logLevel,format="%(asctime)s - %(module)s.%(funcName)s: %(message)s")


    try:
        client=vos.Client(certFile=opt.certfile)
    except Exception as e:
        logging.error("Conneciton failed:  %s" %  (str(e)))
        sys.exit(e.errno)

    dest=args.pop()

    for source in args:

        ### the source must exist, of course...
        if not access(source,os.R_OK):
            logging.error("Can't open file %s for read" % ( source))
            sys.exit(errno.EACCES)


        ## copying inside VOSpace not yet implemented
        if source[0:4]=='vos:' and dest[0:4]=='vos:' :
            logging.error("Can't copy from VOSpace to VOSpace")
            sys.exit(errno.EOPNOTSUPP)

	thisDest=dest
        if isdir(source):
            ## To mimic unix fs behaviours if copying a directory and
            ## the destination directory exists then the actual
            ## destination in a recursive copy is the destination +
            ## source basename.  This has an odd behaviour if more than one directory is given as a source and the copy is recursive.
            if access(dest,os.F_OK):
                if not isdir(dest):
                    logging.error("Can't write a directory (%s) to a file (%s)" % (source,dest))
                    sys.exit(errno.ENOTDIR)
                else:
                    dest=os.path.normpath(os.path.join(dest,os.path.basename(source)))
            elif len(args) > 1:
                logging.error("I don't now how to copy multiple things into a non-existant location (%s)" % (dest))
                sys.exit(errno.ENOTSUPP)
        elif access(dest,os.F_OK) and isdir(dest):
            ### we're copying into a directory
            thisDest=os.path.join(dest,os.path.basename(source))

        try: 
            copy(source,thisDest)
        except Exception as e:
            logging.error("Failed to copy %s to %s:  %s" %(source, thisDest, str(e)))
            sys.exit(-1)
